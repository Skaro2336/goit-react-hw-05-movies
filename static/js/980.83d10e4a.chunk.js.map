{"version":3,"file":"static/js/980.83d10e4a.chunk.js","mappings":"mTAEMA,EAAW,+BACXC,EAAU,mCAEHC,EAAgB,mCAAG,sGACPC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFd,cACxBG,EADwB,OAIxBC,EAAWD,EAASE,KAAKC,QAJD,kBAKvBF,GALuB,2CAAH,qDAQhBG,EAAkB,mCAAG,WAAMC,GAAN,yFACTN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,iCAC+CQ,EAD/C,gCADS,cAC1BL,EAD0B,OAI1BG,EAAUH,EAASE,KAAKC,QAJE,kBAKzBA,GALyB,2CAAH,sDAQlBG,EAAiB,mCAAG,WAAMC,GAAN,yFACRR,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAW,EADA,oBACmBV,EADnB,oBADQ,cACzBG,EADyB,OAIzBC,EAAWD,EAASE,KAJK,kBAKxBD,GALwB,2CAAH,sDAQjBO,EAAc,mCAAG,WAAMD,GAAN,yFACLR,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAW,EADA,4BAC2BV,EAD3B,oBADK,cACtBG,EADsB,OAItBC,EAAWD,EAASE,KAAKO,KAJH,kBAKrBR,GALqB,2CAAH,sDAQdS,EAAiB,mCAAG,WAAMH,GAAN,yFACRR,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAW,EADA,4BAC2BV,EAD3B,2BADQ,cACzBG,EADyB,OAIzBC,EAAWD,EAASE,KAAKC,QAJA,kBAKxBF,GALwB,2CAAH,qD,4KCnCjBU,EAAkBC,EAAAA,EAAAA,IAAH,0CAIfC,EAAgBD,EAAAA,EAAAA,GAAH,oEAKbE,EAAYF,EAAAA,EAAAA,GAAH,8IAOTG,EAAYH,EAAAA,EAAAA,GAAH,gPAgBTI,EAAYJ,EAAAA,EAAAA,IAAH,wEAKTK,EAAYL,EAAAA,EAAAA,GAAH,gE,SCsBtB,EAjDa,WACX,OAAwBM,EAAAA,EAAAA,UAAS,IAAjC,eAAOT,EAAP,KAAaU,EAAb,KACQZ,GAAYa,EAAAA,EAAAA,MAAZb,QAcR,OAZAc,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAESd,EAAAA,EAAAA,IAAeD,GAFxB,OAERP,EAFQ,OAGdmB,EAAQnB,GAHM,gDAKduB,QAAQC,MAAR,MALc,yDAAH,qDAQfF,GACD,GAAE,CAACf,KAGF,UAACI,EAAD,WACmB,IAAhBF,EAAKgB,SACJ,iCACE,SAACZ,EAAD,oBACA,SAACC,EAAD,UACGL,EAAKiB,KAAI,SAAAC,GAAK,OACb,UAACZ,EAAD,YACE,gBACEa,IACED,EAAME,aAAN,yCACsCF,EAAME,cAD5C,oDAIFC,IAAG,UAAKH,EAAMI,KAAX,eAEL,UAACf,EAAD,YACE,SAACC,EAAD,UAAYU,EAAMI,QAClB,uCAAeJ,EAAMK,cACrB,wCAAgBL,EAAMM,mBAZVN,EAAMO,GADT,SAoBJ,IAAhBzB,EAAKgB,SACJ,yEAIP,C","sources":["Api/Api.js","components/Cast/CastStyles.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '4b34cc9253777dc6fec5c1871a98544b';\n\nexport const fetchTrendMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  const products = response.data.results;\n  return products;\n};\n\nexport const searchMoviesByName = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  const results = response.data.results;\n  return results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  const products = response.data;\n  return products;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  const products = response.data.cast;\n  return products;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  const products = response.data.results;\n  return products;\n};\n","import styled from '@emotion/styled';\n\nexport const ActorsContainer = styled.div`\n  padding: 20px;\n`;\n\nexport const ActorsHeading = styled.h2`\n  font-size: 24px;\n  margin-bottom: 20px;\n`;\n\nexport const ActorList = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 20px;\n`;\n\nexport const ActorItem = styled.li`\n  text-align: center;\n\n  img {\n    width: 100%;\n    max-height: 300px;\n    object-fit: cover;\n    border-radius: 8px;\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\n  }\n\n  p {\n    margin-top: 10px;\n  }\n`;\n\nexport const ActorInfo = styled.div`\n  background-color: #f0f0f0;\n  padding: 10px;\n`;\n\nexport const ActorName = styled.h3`\n  font-size: 18px;\n  margin-top: 5px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'Api/Api';\nimport {\n  ActorsContainer,\n  ActorsHeading,\n  ActorList,\n  ActorItem,\n  ActorInfo,\n  ActorName,\n} from './CastStyles';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const movieCast = async () => {\n      try {\n        const response = await fetchMovieCast(movieId);\n        setCast(response);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    movieCast();\n  }, [movieId]);\n\n  return (\n    <ActorsContainer>\n      {cast.length !== 0 && (\n        <>\n          <ActorsHeading>Cast</ActorsHeading>\n          <ActorList>\n            {cast.map(actor => (\n              <ActorItem key={actor.id}>\n                <img\n                  src={\n                    actor.profile_path\n                      ? `https://image.tmdb.org/t/p/w200${actor.profile_path}`\n                      : `https://via.placeholder.com/200x300?text=No+Image`\n                  }\n                  alt={`${actor.name} profile`}\n                />\n                <ActorInfo>\n                  <ActorName>{actor.name}</ActorName>\n                  <p>Character: {actor.character}</p>\n                  <p>Popularity: {actor.popularity}</p>\n                </ActorInfo>\n              </ActorItem>\n            ))}\n          </ActorList>\n        </>\n      )}\n      {cast.length === 0 && (\n        <div>No cast members available for this movie.</div>\n      )}\n    </ActorsContainer>\n  );\n};\n\nexport default Cast;\n"],"names":["BASE_URL","API_KEY","fetchTrendMovies","axios","response","products","data","results","searchMoviesByName","query","fetchMovieDetails","movieId","fetchMovieCast","cast","fetchMovieReviews","ActorsContainer","styled","ActorsHeading","ActorList","ActorItem","ActorInfo","ActorName","useState","setCast","useParams","useEffect","movieCast","console","error","length","map","actor","src","profile_path","alt","name","character","popularity","id"],"sourceRoot":""}