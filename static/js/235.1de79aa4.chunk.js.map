{"version":3,"file":"static/js/235.1de79aa4.chunk.js","mappings":"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","sources":["Api/Api.js","components/Button/ButtonStyles.jsx","components/Button/Button.jsx","pages/MoviesDetails/MovieDetailsStyles.jsx","pages/MoviesDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '4b34cc9253777dc6fec5c1871a98544b';\n\nexport const fetchTrendMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  const products = response.data.results;\n  return products;\n};\n\nexport const searchMoviesByName = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  const results = response.data.results;\n  return results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  const products = response.data;\n  return products;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  const products = response.data.cast;\n  return products;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  const products = response.data.results;\n  return products;\n};\n","import styled from '@emotion/styled';\n\nexport const Btn = styled.button`\n  width: 130px;\n  height: 30px;\n  margin-top: 20px;\n  border-radius: 4px;\n  background-color: #3f51b5;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  text-align: center;\n  display: inline-block;\n  color: #fff;\n  border: none;\n  text-decoration: none;\n  font-family: inherit;\n  font-size: 18px;\n  line-height: 24px;\n  font-style: normal;\n  font-weight: 500;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n\n  &:hover {\n    background-color: #5f51b5;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0.3rem rgba(0, 0, 0, 0.2);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Btn } from './ButtonStyles';\n\nconst Button = ({ text }) => {\n  return <Btn type=\"button\">{text}</Btn>;\n};\nexport default Button;\n\nButton.propTypes = {\n  text: PropTypes.string,\n};\n","import styled from '@emotion/styled';\nimport Button from 'components/Button';\n\nexport const MovieDetailsContainer = styled.div`\n  display: flex;\n  margin-top: 50px;\n  padding: 20px;\n  background-color: #f0f0f0;\n  border-radius: 10px;\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\n\n  @media (max-width: 767px) {\n    display: flex;\n    flex-direction: column;\n  }\n`;\n\nexport const MovieDetailsHeader = styled.div`\n  color: black;\n  text-align: left;\n  margin-bottom: 20px;\n  margin-left: 30px;\n  margin-top: 20px;\n\n  h1 {\n    font-size: 28px;\n    margin: 0;\n  }\n\n  p {\n    font-size: 18px;\n    margin: 10px 0;\n  }\n\n  h2 {\n    font-size: 24px;\n    margin: 20px 0 10px;\n  }\n\n  span {\n    font-size: 18px;\n    margin-right: 10px;\n  }\n`;\n\nexport const MovieImageContainer = styled.div`\n  text-align: center;\n  margin: 20px 0;\n`;\nexport const MovieImage = styled.img`\n  max-width: 100%;\n  height: auto;\n\n  @media (min-width: 320px) and (max-width: 767px) {\n    max-width: 80vw;\n  }\n  @media (min-width: 768px) and (max-width: 1024px) {\n    max-width: 50vw;\n  }\n`;\nexport const ProductionCompanies = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  margin-top: 20px;\n\n  img {\n    max-height: 50px;\n    max-width: 200px;\n    margin-right: 30px;\n  }\n`;\nexport const Companie = styled.div``;\n\nexport const AdditionalInfoContainer = styled.div`\n  display: flex;\n  gap: 20px;\n`;\n\nexport const AdditionalInfoButton = styled(Button)``;\n\nexport const Divider = styled.hr`\n  margin: 20px 0;\n  border: none;\n  border-top: 1px solid #ccc;\n`;\n","import React, { useEffect, useState, useRef, Suspense } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\n\nimport { fetchMovieDetails } from 'Api/Api';\nimport LoadingSpinner from 'components/Loader';\nimport Button from 'components/Button';\n\nimport {\n  MovieDetailsContainer,\n  MovieDetailsHeader,\n  MovieImageContainer,\n  MovieImage,\n  ProductionCompanies,\n  Companie,\n  AdditionalInfoContainer,\n  AdditionalInfoButton,\n  Divider,\n} from './MovieDetailsStyles';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const backLinkRef = useRef(location.state?.from || '/');\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        const movie = await fetchMovieDetails(movieId);\n        setMovieDetails(movie);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchMovie();\n  }, [movieId]);\n\n  if (!movieDetails) {\n    return <LoadingSpinner />;\n  }\n\n  return (\n    <>\n      <Link to={backLinkRef.current}>\n        <Button text=\"Go back\" />\n      </Link>\n      <MovieDetailsContainer>\n        <MovieImageContainer>\n          <MovieImage />\n          <img\n            src={\n              movieDetails.poster_path\n                ? `https://image.tmdb.org/t/p/w500${movieDetails.poster_path}`\n                : `https://via.placeholder.com/200x300?text=No+Image`\n            }\n            alt={movieDetails.title}\n          />\n        </MovieImageContainer>\n        <MovieDetailsHeader>\n          <h1>{movieDetails.title}</h1>\n          <p>User score: {movieDetails.popularity}%</p>\n          <h2>Overview</h2>\n          <p>{movieDetails.overview}</p>\n          <h2>Genres</h2>\n          <p>\n            {movieDetails.genres.map(genre => (\n              <span key={genre.id}>{genre.name}</span>\n            ))}\n          </p>\n          {movieDetails.production_companies.length > 0 && (\n            <>\n              <h2>Production companies</h2>\n              <ProductionCompanies>\n                {movieDetails.production_companies.map(company => (\n                  <Companie key={company.id}>\n                    <img\n                      src={\n                        company.logo_path\n                          ? `https://image.tmdb.org/t/p/w500${company.logo_path}`\n                          : `https://via.placeholder.com/100x50?text=No+Image`\n                      }\n                      alt={company.name}\n                    />\n                  </Companie>\n                ))}\n              </ProductionCompanies>\n            </>\n          )}\n        </MovieDetailsHeader>\n      </MovieDetailsContainer>\n      <Divider />\n      <h3>Additional information</h3>\n      <AdditionalInfoContainer>\n        <Link to=\"cast\">\n          <AdditionalInfoButton text=\"Cast\" />\n        </Link>\n        <Link to=\"reviews\">\n          <AdditionalInfoButton text=\"Reviews\" />\n        </Link>\n      </AdditionalInfoContainer>\n      <Divider />\n      <Suspense fallback={<LoadingSpinner />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["BASE_URL","API_KEY","fetchTrendMovies","axios","response","products","data","results","searchMoviesByName","query","fetchMovieDetails","movieId","fetchMovieCast","cast","fetchMovieReviews","Btn","styled","text","type","MovieDetailsContainer","MovieDetailsHeader","MovieImageContainer","MovieImage","ProductionCompanies","Companie","AdditionalInfoContainer","AdditionalInfoButton","Button","Divider","useParams","location","useLocation","useState","movieDetails","setMovieDetails","backLinkRef","useRef","state","from","useEffect","fetchMovie","movie","console","error","to","current","src","poster_path","alt","title","popularity","overview","genres","map","genre","name","id","production_companies","length","company","logo_path","Suspense","fallback"],"sourceRoot":""}